import openai
import os
from sendgrid import SendGridAPIClient
from sendgrid.helpers.mail import Mail
from dotenv import load_dotenv
from datetime import datetime

from .email_prompts import get_prompt

load_dotenv()

openai.api_key = os.getenv("OPENAI_API_KEY")

# TEMP IN-MEMORY LOG (replace with DB later)
send_log = {}  # {contact_id: [{"attempt": 1, "timestamp": ..., "status": "sent"}]}

def send_initial_email(contact, attempt=1):
    contact = contact.with_id()
    prompt = get_prompt(contact, attempt)

    try:
        response = openai.ChatCompletion.create(
            model="gpt-4o",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.7,
        )

        text = response["choices"][0]["message"]["content"]
        subject = "Letâ€™s connect"

        # Attempt to extract subject line if it's in the output
        if "Subject:" in text:
            lines = text.splitlines()
            for line in lines:
                if line.lower().startswith("subject:"):
                    subject = line.split(":", 1)[1].strip()
                    break

        message = Mail(
            from_email="yourname@yourdomain.com",
            to_emails=contact.email,
            subject=subject,
            plain_text_content=text,
        )

        sg = SendGridAPIClient(os.getenv("SENDGRID_API_KEY"))
        sg.send(message)

        # Log send
        if contact.id not in send_log:
            send_log[contact.id] = []

        send_log[contact.id].append({
            "attempt": attempt,
            "timestamp": datetime.utcnow(),
            "status": "sent"
        })

        print(f"[Email Sent] {contact.email} (Attempt #{attempt})")

    except Exception as e:
        print(f"[Error Sending Email to {contact.email}]: {e}")

